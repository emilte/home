[user]
	name = Emil Telstad
	email = 22004178+emilte@users.noreply.github.com
[pull]
	rebase = false
[core]
	editor = nano
	autocrlf = input
[init]
	defaultBranch = master
[alias]
	m = !git co "$(git default)" && git pull
	co = switch
	s = status
	p = pull
	is-diff = diff --quiet
	is-repo = !git rev-parse --is-inside-work-tree >/dev/null 2>&1
	current = rev-parse --abbrev-ref HEAD # Get name of current branch.
	default = !git remote show origin | awk '/HEAD branch/ {print $NF}' # Get name of default branch.
	is-default = ![ "$(git current)" = "$(git default)" ] # Determine if current branch is the default branch.
	remote-url = config --get remote.origin.url # Get remote origin url.
	remote-url-http = ! url=$(git remote-url) && url=${url/://} && url=${url/*@/https://} && echo $url # Replaces colon from string
	is-glab = ![[ "$(git remote-url)" == "git@gitlab"* ]]
	is-gh = ![[ "$(git remote-url)" == "git@github"* ]]
	st = stash
	sa = stash apply

	ub = !git prm && git fpush # Update branch with latest changes from default branch with rebase.

	# Updates local default branch with latest changes from remote, no checkout needed.
	# If default branch, run git pull, otherwise run custom pull. (Custom pull didn't work on the default branch.)
	# TEST && ( THEN_EXPRESSIONS ) || (ELSE_EXPRESSIONS ) # https://www.baeldung.com/linux/one-line-if-else-condition
	# https://stackoverflow.com/a/53667801/12616507
	pm = !git fetch --all && git is-default && ( git pull ) || ( BRANCH=$(git default) && echo "Pulling origin/$BRANCH into $BRANCH ..." && git fetch origin $BRANCH:$BRANCH && echo "Branch $BRANCH is now up to date." )
	# (old alias) pm = !"git stash | awk '/No local changes to save/' | grep . ; WAS_CLEAN=$? && git co $(git default) && git fetch --all && git pull && git co - && [ $WAS_CLEAN = 1 ] && git stash apply"
	
	prm = !git pm && git rebase $(git default)
	pmm = !git pm && git merge $(git default)
	fpush = !git push --force-with-lease $(git current) # Force push with lease.
	af = !git amend && git fpush # Shortcut.
	aaf = !git add . && git af # Shortcut.
	fix = commit --fixup # <commit> # Add fixup commit to another commit.
	olog = log --oneline # Less verbose log.
	ologg = olog -g # Include reflog.
	squash = rebase -i --autosquash # <branch> # Autosquashes fixup commits.
	amend = commit --amend --verbose # Amend staged changes to last commit.
	freset = !git reset --hard @{upstream} # Hard reset current branch.
	mr = !glab mr view --web # Open current merge request on gitlab in browser.
	pr = !gh pr view --web # Open current merge request on gitlab in browser.

	repo = ! open $(git remote-url-http) # Open repository in browser.

	# https://stackoverflow.com/a/3528483/12616507
	down = reset --soft --keep HEAD^ # Move HEAD down one commit , keep changes in staged.
	# undo = reset --soft --keep HEAD~1 # Move HEAD back one commit, keep changes in staged.
	undo = reset --mixed --keep HEAD@{1} # Undo last action.

# https://www.youtube.com/watch?v=aolI_Rz0ZqY&ab_channel=GitButler
[maintenance]
	auto = false
	strategy = incremental
# [rerere]
	# enabled = true # Remember merge conflict and fix for me. Even rebase.
